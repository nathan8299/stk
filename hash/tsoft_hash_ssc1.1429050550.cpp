//---------------------------------------------------------------------------
//----------------- sstsoft 2001-2015 -------------------------------
//---------------------------------------------------------------------------
#include "tsoft_hash_ssc1.h"
//---------------------------------------------------------------------------
#include "./../mem/tsoft_mem32.h"
#include "./../io/tsoft_console.h"
//---------------------------------------------------------------------------

static const __int32 k[4*16] = {
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000
};
//---------------------------------------------------------------------------
static const __int8 h_num[128] = {
	0x00,0x00,0x00,0x00,
	0x01,0x01,0x01,0x01,
	0x02,0x02,0x02,0x02,
	0x03,0x03,0x03,0x03,
	0x04,0x04,0x04,0x04,
	0x05,0x05,0x05,0x05,
	0x06,0x06,0x06,0x06,
	0x07,0x07,0x07,0x07,
	0x08,0x08,0x08,0x08,
	0x09,0x09,0x09,0x09,
	0x0A,0x0A,0x0A,0x0A,
	0x0B,0x0B,0x0B,0x0B,
	0x0C,0x0C,0x0C,0x0C,
	0x0D,0x0D,0x0D,0x0D,
	0x0E,0x0E,0x0E,0x0E,
	0x0F,0x0F,0x0F,0x0F,
	0x10,0x10,0x10,0x10,
	0x11,0x11,0x11,0x11,
	0x12,0x12,0x12,0x12,
	0x13,0x13,0x13,0x13,
	0x14,0x14,0x14,0x14,
	0x15,0x15,0x15,0x15,
	0x16,0x16,0x16,0x16,
	0x17,0x17,0x17,0x17,
	0x18,0x18,0x18,0x18,
	0x19,0x19,0x19,0x19,
	0x1A,0x1A,0x1A,0x1A,
	0x1B,0x1B,0x1B,0x1B,
	0x1C,0x1C,0x1C,0x1C,
	0x1D,0x1D,0x1D,0x1D,
	0x1E,0x1E,0x1E,0x1E,
	0x1F,0x1F,0x1F,0x1F
};



//---------------------------------------------------------------------------
static const __int8 d_shift[256] = {
	0x00, 0x01, 0x01, 0x02, 0x01, 0x02, 0x02, 0x03,
	0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
	0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
	0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
	0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
	0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
	0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
	0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
	0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
	0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
	0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
	0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
	0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
	0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
	0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
	0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
	0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
	0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
	0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
	0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
	0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
	0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
	0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
	0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
	0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
	0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
	0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
	0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
	0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
	0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
	0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
	0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08
};

static const __int32 b_sum[256] = {
	0x00000000, 0x01000000, 0x01000000, 0x02000000, 0x01000000, 0x02000000, 0x02000000, 0x03000000,
	0x01000000, 0x02000000, 0x02000000, 0x03000000, 0x02000000, 0x03000000, 0x03000000, 0x04000000,
	0x01000000, 0x02000000, 0x02000000, 0x03000000, 0x02000000, 0x03000000, 0x03000000, 0x04000000,
	0x02000000, 0x03000000, 0x03000000, 0x04000000, 0x03000000, 0x04000000, 0x04000000, 0x05000000,
	0x01000000, 0x02000000, 0x02000000, 0x03000000, 0x02000000, 0x03000000, 0x03000000, 0x04000000,
	0x02000000, 0x03000000, 0x03000000, 0x04000000, 0x03000000, 0x04000000, 0x04000000, 0x05000000,
	0x02000000, 0x03000000, 0x03000000, 0x04000000, 0x03000000, 0x04000000, 0x04000000, 0x05000000,
	0x03000000, 0x04000000, 0x04000000, 0x05000000, 0x04000000, 0x05000000, 0x05000000, 0x06000000,
	0x01000000, 0x02000000, 0x02000000, 0x03000000, 0x02000000, 0x03000000, 0x03000000, 0x04000000,
	0x02000000, 0x03000000, 0x03000000, 0x04000000, 0x03000000, 0x04000000, 0x04000000, 0x05000000,
	0x02000000, 0x03000000, 0x03000000, 0x04000000, 0x03000000, 0x04000000, 0x04000000, 0x05000000,
	0x03000000, 0x04000000, 0x04000000, 0x05000000, 0x04000000, 0x05000000, 0x05000000, 0x06000000,
	0x02000000, 0x03000000, 0x03000000, 0x04000000, 0x03000000, 0x04000000, 0x04000000, 0x05000000,
	0x03000000, 0x04000000, 0x04000000, 0x05000000, 0x04000000, 0x05000000, 0x05000000, 0x06000000,
	0x03000000, 0x04000000, 0x04000000, 0x05000000, 0x04000000, 0x05000000, 0x05000000, 0x06000000,
	0x04000000, 0x05000000, 0x05000000, 0x06000000, 0x05000000, 0x06000000, 0x06000000, 0x07000000,
	0x01000000, 0x02000000, 0x02000000, 0x03000000, 0x02000000, 0x03000000, 0x03000000, 0x04000000,
	0x02000000, 0x03000000, 0x03000000, 0x04000000, 0x03000000, 0x04000000, 0x04000000, 0x05000000,
	0x02000000, 0x03000000, 0x03000000, 0x04000000, 0x03000000, 0x04000000, 0x04000000, 0x05000000,
	0x03000000, 0x04000000, 0x04000000, 0x05000000, 0x04000000, 0x05000000, 0x05000000, 0x06000000,
	0x02000000, 0x03000000, 0x03000000, 0x04000000, 0x03000000, 0x04000000, 0x04000000, 0x05000000,
	0x03000000, 0x04000000, 0x04000000, 0x05000000, 0x04000000, 0x05000000, 0x05000000, 0x06000000,
	0x03000000, 0x04000000, 0x04000000, 0x05000000, 0x04000000, 0x05000000, 0x05000000, 0x06000000,
	0x04000000, 0x05000000, 0x05000000, 0x06000000, 0x05000000, 0x06000000, 0x06000000, 0x07000000,
	0x02000000, 0x03000000, 0x03000000, 0x04000000, 0x03000000, 0x04000000, 0x04000000, 0x05000000,
	0x03000000, 0x04000000, 0x04000000, 0x05000000, 0x04000000, 0x05000000, 0x05000000, 0x06000000,
	0x03000000, 0x04000000, 0x04000000, 0x05000000, 0x04000000, 0x05000000, 0x05000000, 0x06000000,
	0x04000000, 0x05000000, 0x05000000, 0x06000000, 0x05000000, 0x06000000, 0x06000000, 0x07000000,
	0x03000000, 0x04000000, 0x04000000, 0x05000000, 0x04000000, 0x05000000, 0x05000000, 0x06000000,
	0x04000000, 0x05000000, 0x05000000, 0x06000000, 0x05000000, 0x06000000, 0x06000000, 0x07000000,
	0x04000000, 0x05000000, 0x05000000, 0x06000000, 0x05000000, 0x06000000, 0x06000000, 0x07000000,
	0x05000000, 0x06000000, 0x06000000, 0x07000000, 0x06000000, 0x07000000, 0x07000000, 0x08000000
};

/* ^^ '1' bits count generator for this table

for (int s = 0, b = 0; s < 256; s++) {
b = 0;
for (int c = 0; c<8;c++) {
b += (s>>c) & 0x01L;
}
if (s % 8==0)fts::console::print_formated(stream,"\n");
fts::console::print_formated(stream,"%#04x000000, ",b);
}
_flushall();
fclose(stream);
return 1;
 */
//---------------------------------------------------------------------------
uint32_t ts::hash::ssc1::h[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//---------------------------------------------------------------------------

void __stdcall ts::hash::ssc1::init_SSC1(void)
{
}
//---------------------------------------------------------------------------

uint32_t*  __stdcall ts::hash::ssc1::calc_SSC1(const void *initial_msg, const __int32 initial_len, const __int32 bits)
{
	// initialize ALL 32x hash variables - simple count in nibbles:
	__int32 n = (bits>>5) - 1;
	for (; n >= 0;  n--) ts::hash::ssc1::h[n] = 0x00000000L;
	if (initial_len==0) return &ts::hash::ssc1::h[n];
	//
	// Message last chunk (to prepare) & chunk pointer
	register __int32 B = (bits>>3); // count number hash BYTES -> chunk size
		unsigned __int8 pB = ((__int8*)initial_msg)[0], cB;
		char *msg_chunk_ptr;
	register __int32 l, l_len = (initial_len % B);
		static char  last_msg_chunk[32 * sizeof(__int32)];
	// calculate chunk size, number of BYTES and hashes to calculate
		register __int32 final_len = initial_len + B - l_len;
		register __int32 chunk_offset, H;
	register __int32 i;
	/* Pre-processing last message chunk*/
	for (l = l_len - 1, i = initial_len - 1; l >= 0; l--) {
				last_msg_chunk[l] = ((__int8*)initial_msg)[i--];
	}
	/* Fill rest of last chunk with chunk position indexes*/
	for (l = l_len; l < B; l++) {
		last_msg_chunk[l] = l;
	}
	/* Main Loop */
	for (chunk_offset = 0; chunk_offset < final_len; ) {
				msg_chunk_ptr = (__int8*)((__int32)initial_msg + chunk_offset);
		chunk_offset += B;
				if (chunk_offset > initial_len) msg_chunk_ptr = (char*)&last_msg_chunk;
		//
		for(i = 0;;) {
			for(H   = ts::hash::ssc1::h[0]; i < B;) {
				cB   = msg_chunk_ptr[i];
				H  += b_sum[cB];
				H  += cB << d_shift[cB ^ pB];
				pB   = cB;
				if (((++i) % 0x10L == 0)) break;
			}
			// Add this chunk's hash to result so far
			ts::hash::ssc1::h[0] = H;
			for(n = 0; n < h_num[B - 1]; n++) {
				H  = ts::hash::ssc1::h[n];
				if ( H >= 0x10000000) ts::hash::ssc1::h[n+1] += (H & 0xF0000000)>>0x04L;
				if ((H  & 0x00FF0000)  >= 0x00010000) ts::hash::ssc1::h[n+1] += (H & 0x00FF0000)>>0x10L;
			}
			if (i>=B) break;
		}
	}
// cleanup & return hash value
	return &ts::hash::ssc1::h[0];
}
//---------------------------------------------------------------------------

void  __stdcall ts::hash::ssc1::print_SSC1(void)
{
		ts::console::print_formated("ssc1 HASH:\n");
		for (__int32 n = 0; n<32; n++) {
				ts::console::print_formated("%#010x ", ts::hash::ssc1::h[n]);
		if ((n+1) % 4==0)
						ts::console::print_formated("\n");
	}
}
//---------------------------------------------------------------------------


